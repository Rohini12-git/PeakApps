// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PeakApps.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("A.UserFeature")]
    public partial class A_UserFeatureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UserFeature.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "A.UserFeature", "\tVerify the user\'s tab functionality", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 6
testRunner.When("I click on user tab ,it redirected to the user page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A. Verify the search,Facility drop down and active/inactive tab")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void A_VerifyTheSearchFacilityDropDownAndActiveInactiveTab()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A. Verify the search,Facility drop down and active/inactive tab", null, new string[] {
                        "mytag"});
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 10
 testRunner.Then("switch to Inactive user tab  from active user to check for tab functionality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.Then("Test \"Facility Drop down Box\" by selecting element", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.Then("Test for search functionality.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("C. Verify the input field of Create User")]
        public virtual void C_VerifyTheInputFieldOfCreateUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("C. Verify the input field of Create User", null, ((string[])(null)));
#line 21
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 22
 testRunner.Then("validate the input field by living them blanks and click on save button.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
 testRunner.And("validate the first name and last name whether they take only letters or numbers.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.Then("validate the email address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("F.Verify user inactive functionality")]
        public virtual void F_VerifyUserInactiveFunctionality()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("F.Verify user inactive functionality", null, ((string[])(null)));
#line 32
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 33
 testRunner.Then("count the active users and click on inactive button of a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.Then("it should prompt a message that \"The user was successfully made inactive.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify user active functionality")]
        public virtual void VerifyUserActiveFunctionality()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify user active functionality", null, ((string[])(null)));
#line 36
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 37
 testRunner.Then("switch to Inactive user tab  from active user.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.Then("count the inactive users and click on active button of a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.Then("it should prompt a message that \"The user was successfully made active.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("G. Verify user having access for facility and role")]
        public virtual void G_VerifyUserHavingAccessForFacilityAndRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("G. Verify user having access for facility and role", null, ((string[])(null)));
#line 58
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 59
 testRunner.Given("view button to enter user role page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
 testRunner.Then("count the facility and role a user having access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("H.Verify Add health system functionality")]
        public virtual void H_VerifyAddHealthSystemFunctionality()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("H.Verify Add health system functionality", null, ((string[])(null)));
#line 63
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 64
 testRunner.Given("Add health system button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.When("click on Add Health System button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.And("select health system from drpdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("click on Add button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.Then("message prompt \"The user was modified successfully.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I. Verify if facility of that health system added in user role")]
        public virtual void I_VerifyIfFacilityOfThatHealthSystemAddedInUserRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I. Verify if facility of that health system added in user role", null, ((string[])(null)));
#line 70
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 71
 testRunner.Given("Facility tab redirect link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
 testRunner.Then("goto facility page to get the facilities having name attached with that hs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 73
 testRunner.Given("health system name \"TestAutoHS\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.Then("goto user role page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
 testRunner.And("match that same facility should be available in user role page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("J. Verify reomove health system functionality from user\'s access")]
        public virtual void J_VerifyReomoveHealthSystemFunctionalityFromUsersAccess()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("J. Verify reomove health system functionality from user\'s access", null, ((string[])(null)));
#line 77
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 78
 testRunner.Given("List of health system a user having access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
 testRunner.When("select a health system and click on remove button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("that health system should removed and prompt message \"The user was modified succe" +
                    "ssfully.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("B. Verify the CreateUser Functionality")]
        [NUnit.Framework.TestCaseAttribute("Super", "Admin", "sa@gmail.com", "3M Super Admin", "", "", new string[] {
                "source:Audit.xlsx:sheet3"}, Category="source:Audit.xlsx:sheet3")]
        [NUnit.Framework.TestCaseAttribute("Admin", "Admin", "admin@gmail.com", "3M Admin", "", "", new string[] {
                "source:Audit.xlsx:sheet3"}, Category="source:Audit.xlsx:sheet3")]
        [NUnit.Framework.TestCaseAttribute("Facility", "Admin", "fa@gmail.com", "Facility Admin", "Carson Hospital", "", new string[] {
                "source:Audit.xlsx:sheet3"}, Category="source:Audit.xlsx:sheet3")]
        [NUnit.Framework.TestCaseAttribute("Auditor", "Admin", "aa@gmail.com", "Facility Auditor", "Carson Hospital", "", new string[] {
                "source:Audit.xlsx:sheet3"}, Category="source:Audit.xlsx:sheet3")]
        [NUnit.Framework.TestCaseAttribute("HealthSystem", "Admin", "has@gmail.com", "Health System Admin", "", "testuserHS", new string[] {
                "source:Audit.xlsx:sheet3"}, Category="source:Audit.xlsx:sheet3")]
        public virtual void B_VerifyTheCreateUserFunctionality(string firstName, string lastName, string emailAddress, string role, string facility, string healthSystem, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("B. Verify the CreateUser Functionality", null, exampleTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 15
    testRunner.Then("Click on Create user Button to check its functionality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
 testRunner.Then(string.Format("creat a user by assigning {0},{1},{2},{3},{4}and{5} and validate where user creat" +
                        "ed or not", firstName, lastName, emailAddress, role, facility, healthSystem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("D. Check the Single Input box vlidation")]
        [NUnit.Framework.TestCaseAttribute("", "Admin", "sa@gmail.com", "3M Super Admin", "", new string[] {
                "source:Audit.xlsx:sheet4"}, Category="source:Audit.xlsx:sheet4")]
        [NUnit.Framework.TestCaseAttribute("Admin", "", "admin@gmail.com", "3M Admin", "", new string[] {
                "source:Audit.xlsx:sheet4"}, Category="source:Audit.xlsx:sheet4")]
        [NUnit.Framework.TestCaseAttribute("Facility", "Admin", "", "Facility Admin", "Carson Hospital", new string[] {
                "source:Audit.xlsx:sheet4"}, Category="source:Audit.xlsx:sheet4")]
        [NUnit.Framework.TestCaseAttribute("Auditor", "Admin", "aa@gmail.com", "Select", "Carson Hospital", new string[] {
                "source:Audit.xlsx:sheet4"}, Category="source:Audit.xlsx:sheet4")]
        [NUnit.Framework.TestCaseAttribute("Auditor", "Admin", "aa@gmail.com", "Facility Auditor", "Select", new string[] {
                "source:Audit.xlsx:sheet4"}, Category="source:Audit.xlsx:sheet4")]
        public virtual void D_CheckTheSingleInputBoxVlidation(string firstName, string lastName, string emailAddress, string role, string facility, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("D. Check the Single Input box vlidation", null, exampleTags);
#line 26
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 27
 testRunner.Then(string.Format("Validate a user field by assigning {0},{1},{2},{3},{4} and leave one of the field" +
                        " empty to check validation", firstName, lastName, emailAddress, role, facility), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E. Verify user role and User Health Systems tab")]
        [NUnit.Framework.TestCaseAttribute("testNew User", null)]
        public virtual void E_VerifyUserRoleAndUserHealthSystemsTab(string name, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E. Verify user role and User Health Systems tab", null, exampleTags);
#line 48
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 49
 testRunner.Given(string.Format("User {0} with view button", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.When("click on view button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("it redirect to user role page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 52
 testRunner.When("click on User Health Systems tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("it redirect to user health system page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
