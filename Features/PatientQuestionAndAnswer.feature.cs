// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PeakApps.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("F.PatientQuestionAndAnswer")]
    [NUnit.Framework.CategoryAttribute("Regression")]
    [NUnit.Framework.CategoryAttribute("test")]
    public partial class F_PatientQuestionAndAnswerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PatientQuestionAndAnswer.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "F.PatientQuestionAndAnswer", null, ProgrammingLanguage.CSharp, new string[] {
                        "Regression",
                        "test"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Custom question Audit Scope and DataEntry")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("patientCustomQs", new string[] {
                "source:Audit.xlsx:CustomPolicy"}, Category="source:Audit.xlsx:CustomPolicy")]
        [NUnit.Framework.TestCaseAttribute("catheterCustomQs", new string[] {
                "source:Audit.xlsx:CustomPolicy"}, Category="source:Audit.xlsx:CustomPolicy")]
        public virtual void CustomQuestionAuditScopeAndDataEntry(string customPolicy, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Custom question Audit Scope and DataEntry", null, @__tags);
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
testRunner.Given("Policy tab redirect link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
testRunner.And("select a facility from facility drop down", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
testRunner.And(string.Format("Activate  {0} to edit", customPolicy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
testRunner.When("Click on edit button of activated policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
testRunner.Then("Copy Policy page open with all the selected custom  question set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
testRunner.Then("store question in a list and match with excel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
testRunner.Given("Redirect link of data entry tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
testRunner.When("enter the facility,date,shift and unit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
testRunner.Then("dataentry page should open with set of answer of policy qs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
testRunner.Then("verify the policy qs and answer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Audit Scope and Data Entry")]
        [NUnit.Framework.TestCaseAttribute("3D", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        [NUnit.Framework.TestCaseAttribute("3E", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        [NUnit.Framework.TestCaseAttribute("3F", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        [NUnit.Framework.TestCaseAttribute("3H", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        [NUnit.Framework.TestCaseAttribute("3i", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        [NUnit.Framework.TestCaseAttribute("3J", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        [NUnit.Framework.TestCaseAttribute("3M", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        [NUnit.Framework.TestCaseAttribute("3A", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        [NUnit.Framework.TestCaseAttribute("3A-4A-11B", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        [NUnit.Framework.TestCaseAttribute("3B-11A", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        [NUnit.Framework.TestCaseAttribute("3B-7A-11B", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        [NUnit.Framework.TestCaseAttribute("3C-11A", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        [NUnit.Framework.TestCaseAttribute("3C-11B", new string[] {
                "source:Audit.xlsx:ActivePolicyList"}, Category="source:Audit.xlsx:ActivePolicyList")]
        public virtual void AuditScopeAndDataEntry(string policy, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Audit Scope and Data Entry", null, exampleTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 23
testRunner.Given("Policy tab redirect link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
testRunner.And("select a facility from facility drop down", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
testRunner.And(string.Format("Activate a {0} to edit", policy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
testRunner.When("Click on edit button of activated policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
testRunner.Then("Copy Policy page open with all the selected question set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
testRunner.Then("store question in a list and match with excel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
testRunner.Given("Redirect link of data entry tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
testRunner.When("enter the facility,date,shift and unit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
testRunner.Then("dataentry page should open with set of answer of policy qs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
testRunner.Then("verify the policy qs and answer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
